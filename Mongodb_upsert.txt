If **upsert: false** is used (or if you don't specify `upsert` at all), MongoDB will **only update existing documents** and will not insert a new one if no match is found.  

### **Example Without Upsert (`upsert: false`)**
```javascript
db.users.updateOne(
    { name: "John Doe" },  // Filter condition
    { $set: { age: 30 } },  // Update operation
    { upsert: false }       // Explicitly disabling upsert (default behavior)
);
```
#### **What happens?**
- If a document with `{ name: "John Doe" }` **exists**, it updates the `age` field.
- If **no matching document** exists, **nothing happens** (MongoDB does not insert a new document).

---

### **Comparison: `upsert: true` vs. `upsert: false`**
| Scenario                          | `upsert: true` (Insert if not found) | `upsert: false` (Default, No Insert) |
|------------------------------------|--------------------------------------|--------------------------------------|
| **Matching document exists**       | Updates the document                | Updates the document                |
| **No matching document exists**    | Inserts a new document              | Does nothing                        |

---

### **Practical Use Cases**
‚úÖ **Use `upsert: true` when:**  
- You want **to insert** a document if it doesn‚Äôt exist.  
- Example: User logs in for the first time, and you want to create their profile automatically.

üö´ **Use `upsert: false` when:**  
- You only want to update documents **if they already exist**.  
- Example: Updating a user's last login time but **not creating a new account** if the user does not exist.  

---

Would you like me to show more advanced examples? üöÄ



====================================================================================================================================


### **What is `$addToSet` in MongoDB?**  
`$addToSet` is an update operator in MongoDB that **adds an element to an array only if it does not already exist**. This helps **prevent duplicate values** in an array field.

---

### **Basic Example**  
#### **Adding a new hobby to a user‚Äôs document**  
```javascript
db.users.updateOne(
    { name: "John Doe" },
    { $addToSet: { hobbies: "reading" } }
);
```
#### **What happens?**  
- If `"reading"` **is not already in** the `hobbies` array, it will be added.  
- If `"reading"` **is already present**, MongoDB **does nothing** (prevents duplication).  

---

### **Comparison: `$push` vs. `$addToSet`**
| Operator  | Adds Value If Duplicate Exists? | Prevents Duplicates? |
|-----------|---------------------------------|----------------------|
| `$push`   | **Yes**, always adds the value  | ‚ùå No                 |
| `$addToSet` | **No**, adds only if not present | ‚úÖ Yes                 |

#### **Example: Using `$push` (Allows Duplicates)**
```javascript
db.users.updateOne(
    { name: "John Doe" },
    { $push: { hobbies: "reading" } }
);
```
If `"reading"` is already in the array, it will **add another "reading"**, causing duplicates.

#### **Example: Using `$addToSet` (Prevents Duplicates)**
```javascript
db.users.updateOne(
    { name: "John Doe" },
    { $addToSet: { hobbies: "reading" } }
);
```
If `"reading"` is already in the array, **it will not be added again**.

---

### **Using `$addToSet` with Multiple Elements**
‚úÖ **Using `$each` to add multiple unique elements:**  
```javascript
db.users.updateOne(
    { name: "John Doe" },
    { $addToSet: { hobbies: { $each: ["coding", "gaming", "reading"] } } }
);
```
- Each value is checked individually before being added.
- If `"reading"` already exists, it **will not be added again**.

---

### **Practical Use Cases**
‚úÖ Use `$addToSet` when:
- You want to **ensure unique values** in an array.
- Example: Adding **unique skills** to a developer's profile.

üö´ Use `$push` when:
- You **don't care about duplicates** and just want to add values.

Would you like a real-world example for a project you're working on? üöÄ
