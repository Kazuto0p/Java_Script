1. Find the price per night of the first record in the listingsAndReviews collection.  
Ans : db.listings.findOne({}, { price: 1, _id: 0 })  

2. Retrieve the cleaning fee of the first record in the listingsAndReviews collection.  
Ans : db.listings.find({}, { cleaning_fee: 1 }).limit(1)  

3. Find the host_name, host_location, host_about of the first record in the listingsAndReviews collection.  
Ans : db.listings.find({}, { "host.host_name": 1, _id: 0, "host.host_location": 1, "host.host_about": 1 })  

4. Retrieve the number of bedrooms in the first record in the listingsAndReviews collection.  
Ans : db.listings.findOne({}, { bedrooms: 1, _id: 0 })  

5. Find all movies with full information from the 'movies' collection that released in the year 1893.  
Ans : db.movies.findOne({ "year": 1893 })  

6. Find all movies with full information from the 'movies' collection that have a runtime greater than 120 minutes.  
Ans : db.movies.find({ "runtime": { "$gt": 120 } })  

7. Find all movies with full information from the 'movies' collection that have "Short" genre.  
Ans : db.movies.find({ "genres": "Short" })  

8. Retrieve all movies from the 'movies' collection that were directed by "William K.L. Dickson" and include complete information for each movie.  
Ans : db.movies.find({ "directors": "William K.L. Dickson" })  

9. Retrieve all movies from the 'movies' collection that were released in the USA and include complete information for each movie.  
Ans : db.movies.find({ "countries": "USA" })  

10. Retrieve all movies from the 'movies' collection that have complete information and are rated as "UNRATED".  
Ans : db.movies.find({ "rated": "UNRATED" })  

11. Retrieve all movies from the 'movies' collection that have complete information and have received more than 1000 votes on IMDb.  
Ans : db.movies.find({ "imdb.votes": { "$gt": 1000 } })  

12. Retrieve all movies from the 'movies' collection that have complete information and have an IMDb rating higher than 7.  
Ans : db.movies.find({ "imdb.rating": { "$gt": 7 } })  

13. Retrieve all movies from the 'movies' collection that have complete information and have a viewer rating higher than 4 on Tomatoes.  
Ans : db.movies.find({ "tomatoes.viewer.rating": { "$gt": 4 } })  

14. Retrieve all movies from the 'movies' collection that have received an award.  
Ans : db.movies.find({ "awards": { "$exists": true, "$ne": "" } })  

15. Find all movies with title, languages, released, directors, writers, awards, year, genres, runtime, cast, countries from the 'movies' collection in MongoDB that have at least one nomination.  
Ans : db.movies.find({ "awards": { "$regex": "Nomination" } }, { "title": 1, "languages": 1, "released": 1, "directors": 1, "writers": 1, "awards": 1, "year": 1, "genres": 1, "runtime": 1, "cast": 1, "countries": 1 })  

16. Find all movies with title, languages, released, directors, writers, awards, year, genres, runtime, cast, countries from the 'movies' collection in MongoDB with cast including "Charles Kayser".  
Ans : db.movies.find({ "cast": "Charles Kayser" }, { "title": 1, "languages": 1, "released": 1, "directors": 1, "writers": 1, "awards": 1, "year": 1, "genres": 1, "runtime": 1, "cast": 1, "countries": 1 })  

17. Retrieve all movies with title, languages, released, directors, writers, countries from the 'movies' collection in MongoDB that released on May 9, 1893.  
Ans : db.movies.find({ "released": ISODate("1893-05-09T00:00:00Z") }, { "title": 1, "languages": 1, "released": 1, "directors": 1, "writers": 1, "countries": 1 })  

18. Retrieve all movies with title, languages, released, directors, writers, countries from the 'movies' collection in MongoDB that have a word "scene" in the title.  

Ans : db.movies.find({ "title": { "$regex": "scene", "$options": "i" } }, { "title": 1, "languages": 1, "released": 1, "directors": 1, "writers": 1, "countries": 1 })  

19. Find all movies with title, languages, released, runtime, directors, writers, countries from the 'movies' collection in MongoDB that have a runtime between 60 and 90 minutes. 
 
Ans : db.movies.find({ "runtime": { "$gte": 60, "$lte": 90 } }, { "title": 1, "languages": 1, "released": 1, "runtime": 1, "directors": 1, "writers": 1, "countries": 1 })  

20. Find all movies from the 'movies' collection in MongoDB with the average runtime of movies released in each country.  
Ans : db.movies.aggregate([{ "$group": { "_id": "$countries", "avg_runtime": { "$avg": "$runtime" } } }])  

21. Find from the 'movies' collection in MongoDB with the most common genre among the movies.  
Ans : db.movies.aggregate([{ "$unwind": "$genres" }, { "$group": { "_id": "$genres", "count": { "$sum": 1 } } }, { "$sort": { "count": -1 } }, { "$limit": 1 }])  

22. Find the movies released in the year with the highest average IMDb rating from the 'movies' collection in MongoDB.  
Ans : db.movies.aggregate([{ "$group": { "_id": "$year", "avg_imdb_rating": { "$avg": "$imdb.rating" } } }, { "$sort": { "avg_imdb_rating": -1 } }, { "$limit": 1 }])  

23. Find the top 10 directors with the most movies from the 'movies' collection in MongoDB.  
Ans : db.movies.aggregate([{ "$unwind": "$directors" }, { "$group": { "_id": "$directors", "movie_count": { "$sum": 1 } } }, { "$sort": { "movie_count": -1 } }, { "$limit": 10 }])  

24. Write a query in MongoDB to find the average IMDb rating for movies with different ratings (e.g., 'PG', 'R', 'G') from the 'movies' collection.  
Ans : db.movies.aggregate([{ "$group": { "_id": "$rated", "avg_imdb_rating": { "$avg": "$imdb.rating" } } }])  

25. Write a query in MongoDB to find the oldest movie with an award win from the 'movies' collection.  
Ans : db.movies.find({ "awards": { "$regex": "Won" } }, { "title": 1, "year": 1, "awards": 1 }).sort({ "year": 1 }).limit(1)  

26. Write a query in MongoDB to find the movie with the highest IMDb rating and viewer rating on Tomatoes from the 'movies' collection.  
Ans : db.movies.find({}, { "title": 1, "imdb.rating": 1, "tomatoes.viewer.rating": 1 }).sort({ "imdb.rating": -1, "tomatoes.viewer.rating": -1 }).limit(1)  

27. Write a query in MongoDB to find the oldest movie with an award win from the 'movies' collection.  
Ans : db.movies.find({ "awards": { "$regex": "Won" } }, { "title": 1, "year": 1, "awards": 1 }).sort({ "year": 1 }).limit(1)  

28. Write a query in MongoDB to find the movie with the highest IMDb rating and viewer rating on Tomatoes from the 'movies' collection.  
Ans : db.movies.find({}, { "title": 1, "imdb.rating": 1, "tomatoes.viewer.rating": 1 }).sort({ "imdb.rating": -1, "tomatoes.viewer.rating": -1 }).limit(1)  

